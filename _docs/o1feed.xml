<Plan>
We suspect the video is not showing because of the complex offset and frame calculations in ContentItemView. The audio plays, indicating the player is loaded, but the VideoPlayer likely ends up outside the visible area. 

Below is a full rewrite of ContentItemView.swift removing the offset and extra safeAreaInsets logic. We use a simpler approach: 
1) Ensure VideoPlayer is sized to fill the parent geometry. 
2) Remove the negative offset that might push the video out of view. 
3) Keep the overlay and the place detail sheet.

This should fix the issue of audio playing but no visible video.
</Plan>

<file path="sightline/sightline/Views/ContentFeed/ContentItemView.swift" action="rewrite">
  <change>
    <description>Remove custom offset and simplify layout so the video displays properly</description>
    <content>
===
import SwiftUI
import AVKit
import FirebaseStorage

struct ContentItemView: View {
    @EnvironmentObject var appState: AppState
    @EnvironmentObject var appStore: AppStore
    let content: Content

    @State private var showingPlaceDetail = false

    var body: some View {
        GeometryReader { geo in
            ZStack {
                if let player = appStore.videoManager.playerFor(url: content.videoUrl) {
                    // Show the video once we have a valid player
                    VideoPlayer(player: player)
                        .aspectRatio(contentMode: .fill)
                        .frame(width: geo.size.width, height: geo.size.height)
                        .clipped()
                        // Fill edges for a fullscreen effect
                        .edgesIgnoringSafeArea(.all)
                } else if appStore.videoManager.error != nil {
                    // Show an error indicator
                    Color.black
                    VStack {
                        Image(systemName: "exclamationmark.triangle")
                            .font(.largeTitle)
                            .foregroundColor(.yellow)
                        Text("Failed to load video")
                            .foregroundColor(.white)
                    }
                } else {
                    // Show a spinner until the manager finishes preparing
                    Color.black
                    ProgressView()
                        .scaleEffect(1.5)
                        .tint(.white)
                }

                // Overlay content details near the bottom
                VStack {
                    Spacer()
                    HStack {
                        VStack(alignment: .leading, spacing: 8) {
                            Text(content.caption)
                                .font(.headline)
                                .foregroundColor(.white)
                                .multilineTextAlignment(.leading)

                            Button {
                                showingPlaceDetail = true
                            } label: {
                                Text(appStore.places[content.placeIds.first ?? ""]?.name ?? "Loading place...")
                                    .font(.subheadline)
                                    .foregroundColor(.white)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 6)
                                    .background(.ultraThinMaterial)
                                    .cornerRadius(16)
                            }
                        }
                        Spacer()
                    }
                    .padding(.horizontal)
                    .padding(.bottom, 100) // move up from bottom
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [.clear, .black.opacity(0.4)]),
                            startPoint: .top,
                            endPoint: .bottom
                        )
                        .edgesIgnoringSafeArea(.bottom)
                    )
                }
            }
        }
        .sheet(isPresented: $showingPlaceDetail) {
            if let firstPlaceId = content.placeIds.first {
                PlaceDetailView(placeId: firstPlaceId, mode: .discovery)
                    .presentationDetents([.fraction(0.75), .large])
                    .presentationDragIndicator(.visible)
            }
        }
        .onAppear {
            // If no preloaded player, prepare & play, otherwise just play
            if appStore.videoManager.playerFor(url: content.videoUrl) == nil {
                appStore.videoManager.play(url: content.videoUrl)
            } else {
                appStore.videoManager.play(url: content.videoUrl)
            }
        }
        .onDisappear {
            // Pause the player when not in view
            appStore.videoManager.pause()
        }
    }
}
===
    </content>
  </change>
</file>