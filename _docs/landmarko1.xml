<Plan>
1. Create **LandmarkDetectionService.swift** for the Cloud Functions logic (annotateImage).
2. Create **LandmarkInfo.swift** to model the detected landmark.
3. Create **LandmarkDetailView.swift** to separate that UI from the detection code.
4. Rewrite **LandmarkDetection.swift** to reference the new service and new files, simplifying the ViewModel flow. Remove unused knowledgeGraph or repeated logic.
</Plan>

<file path="sightline/sightline/Services/LandmarkDetectionService.swift" action="create">
  <change>
    <description>Create a service to handle calling the 'annotateImage' Cloud Function.</description>
    <content>
===
import UIKit
import FirebaseFunctions
import FirebaseAuth

/// A service that handles landmark detection by calling the Firebase Cloud Function.
actor LandmarkDetectionService {
    private lazy var functions = Functions.functions()

    /// Calls the Firebase Cloud Function to detect a landmark in the given image.
    /// - Parameter image: The UIImage to analyze.
    /// - Returns: A dictionary describing the landmark, or `nil` if none found.
    func detectLandmark(in image: UIImage) async throws -> [String: Any]? {
        guard let imageData = image.jpegData(compressionQuality: 0.8) else {
            throw LandmarkDetectionError.invalidImageData
        }
        let base64String = imageData.base64EncodedString()

        let requestData: [String: Any] = [
            "image": ["content": base64String],
            "features": [
                ["maxResults": 1, "type": "LANDMARK_DETECTION"]
            ]
        ]

        let result = try await functions.httpsCallable("annotateImage").call(requestData)
        guard let dict = result.data as? [String: Any],
              let landmarkData = dict["landmark"] as? [String: Any] else {
            // If there's no "landmark" key, that means no landmark was detected.
            return nil
        }
        return landmarkData
    }
}

/// Errors that can occur during landmark detection.
enum LandmarkDetectionError: Error {
    case invalidImageData
    case failedCloudFunction(String)
}
===
    </content>
  </change>
</file>

<file path="sightline/sightline/Models/LandmarkInfo.swift" action="create">
  <change>
    <description>Model for the detected landmark, including optional neighborhood.</description>
    <content>
===
import Foundation
import FirebaseFirestore

/// Simple struct to hold essential landmark data from the Vision API & neighborhood fetch.
struct LandmarkInfo: Identifiable {
    let id = UUID()
    let name: String
    let latitude: Double?
    let longitude: Double?
    let neighborhood: Neighborhood?

    init(name: String,
         latitude: Double? = nil,
         longitude: Double? = nil,
         neighborhood: Neighborhood? = nil) {
        self.name = name
        self.latitude = latitude
        self.longitude = longitude
        self.neighborhood = neighborhood
    }
}
===
    </content>
  </change>
</file>

<file path="sightline/sightline/Views/LandmarkDetailView.swift" action="create">
  <change>
    <description>Separate LandmarkDetailView for displaying details about the detected landmark.</description>
    <content>
===
import SwiftUI
import MapKit
import os

struct LandmarkDetailView: View {
    let landmark: LandmarkInfo

    @State private var region = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 30.0, longitude: -97.0),
        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
    )

    private let logger = Logger(subsystem: Bundle.main.bundleIdentifier ?? "Sightline", category: "LandmarkDetailView")

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                // Basic text info
                Text(landmark.name)
                    .font(.title)
                    .bold()

                if let lat = landmark.latitude, let lon = landmark.longitude {
                    Text("Coordinates: \(lat), \(lon)")
                        .font(.subheadline)
                } else {
                    Text("No coordinates available.")
                        .font(.subheadline)
                }

                // If there's an associated neighborhood
                if let nb = landmark.neighborhood {
                    Text("Neighborhood: \(nb.name)")
                        .font(.headline)
                    // Show other details if you like
                } else {
                    Text("No neighborhood found for this landmark.")
                        .font(.headline)
                }

                Divider()

                // Example map
                if let lat = landmark.latitude, let lon = landmark.longitude,
                   CLLocationCoordinate2DIsValid(CLLocationCoordinate2D(latitude: lat, longitude: lon)) {
                    Map(coordinateRegion: $region, annotationItems: ["Detected Landmark"]) { _ in
                        MapMarker(coordinate: CLLocationCoordinate2D(latitude: lat, longitude: lon), tint: .red)
                    }
                    .onAppear {
                        region = MKCoordinateRegion(
                            center: CLLocationCoordinate2D(latitude: lat, longitude: lon),
                            span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
                        )
                    }
                    .frame(height: 250)
                    .cornerRadius(12)
                }
            }
            .padding()
        }
        .navigationBarTitleDisplayMode(.inline)
    }
}
===
    </content>
  </change>
</file>

<file path="sightline/sightline/sightline/LandmarkDetection.swift" action="rewrite">
  <change>
    <description>Refactor: remove embedded LandmarkDetailView & Info; use the new service. Simplify logic.</description>
    <content>
===
import SwiftUI
import UIKit
import FirebaseAuth
import FirebaseFirestore

/// Main Landmark Detection View + ViewModel,
/// referencing the new LandmarkDetectionService and LandmarkInfo model.
struct LandmarkDetectionView: View {
    @EnvironmentObject var appState: AppState

    // Because we have an actor for detection, keep a single instance
    private let detectionService = LandmarkDetectionService()

    @StateObject private var viewModel: LandmarkDetectionViewModel = LandmarkDetectionViewModel()
    @State private var isCameraMode = false
    @State private var navigateToLandmark: LandmarkInfo? = nil

    // Scanning UI
    @State private var showTransition: Bool = false
    @State private var shouldFlash = false
    @State private var fadeToBlack = false
    @State private var showingGalleryPicker = false

    @Namespace private var scanningNamespace

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Background
                Image("discoverbg")
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(width: geometry.size.width, height: geometry.size.height + 100)
                    .clipped()

                // If we're in camera mode
                if isCameraMode {
                    CameraView(
                        onFrameCaptured: { image in
                            Task {
                                await viewModel.detectLandmark(image: image, using: detectionService)
                                if let landmark = viewModel.detectedLandmark {
                                    await animateLandmarkDetectionFlow(landmark: landmark)
                                }
                            }
                        },
                        shouldFlash: $shouldFlash
                    )

                    // Close Button
                    VStack {
                        HStack {
                            Button {
                                isCameraMode = false
                            } label: {
                                Image(systemName: "xmark")
                                    .font(.title2)
                                    .foregroundColor(.white)
                                    .padding(12)
                                    .background(.ultraThinMaterial)
                                    .clipShape(Circle())
                            }
                            .padding(.leading)
                            Spacer()
                        }
                        .padding(.top, geometry.safeAreaInsets.top + 40)
                        Spacer()
                    }

                    // Scanning animations
                    if showTransition {
                        ScanningTransitionView(namespace: scanningNamespace)
                            .ignoresSafeArea()
                    } else {
                        ScanningAnimation(namespace: scanningNamespace)
                            .ignoresSafeArea()
                    }

                    // Errors or progress
                    if viewModel.errorMessage.contains("Error") {
                        VStack {
                            Spacer()
                            Text(viewModel.errorMessage)
                                .foregroundColor(.white)
                                .padding()
                                .background(.black.opacity(0.6))
                                .cornerRadius(10)
                                .padding(.bottom, 30)
                        }
                    }

                    // Fade-out overlay
                    Color.black
                        .opacity(fadeToBlack ? 1.0 : 0.0)
                        .ignoresSafeArea()

                } else {
                    // Normal "Discover" screen
                    ScrollView {
                        GeometryReader { scrollGeometry in
                            VStack {
                                Spacer(minLength: 800)

                                VStack(spacing: 16) {
                                    Image(systemName: "camera.viewfinder")
                                        .font(.system(size: 64))
                                        .foregroundColor(Color(.systemYellow))

                                    Text("Discover Your City")
                                        .font(.custom("Baskerville-Bold", size: 32))
                                        .multilineTextAlignment(.center)
                                        .frame(maxWidth: .infinity)
                                        .padding(.horizontal, 24)

                                    Text("Capture landmarks to unlock neighborhood content and explore local stories")
                                        .font(.custom("Baskerville", size: 20))
                                        .foregroundColor(.white)
                                        .multilineTextAlignment(.center)
                                        .frame(maxWidth: .infinity)
                                        .padding(.horizontal, 24)

                                    Button {
                                        isCameraMode = true
                                    } label: {
                                        HStack(spacing: 12) {
                                            Image(systemName: "camera.fill")
                                                .font(.title3)
                                            Text("Open Camera")
                                                .font(.title3)
                                        }
                                        .foregroundColor(.black)
                                        .frame(maxWidth: .infinity)
                                        .padding(.vertical, 16)
                                        .background(Color(.systemYellow))
                                        .cornerRadius(12)
                                    }
                                    .padding(.top, 12)
                                }
                                .padding(24)
                                .background(.ultraThinMaterial)
                                .cornerRadius(16)
                                .shadow(radius: 8)
                                .padding()

                                Spacer(minLength: 0)
                            }
                            .frame(
                                minWidth: scrollGeometry.size.width,
                                minHeight: scrollGeometry.size.height
                            )
                        }
                    }
                }

#if DEBUG
                // Debug Gallery button
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button {
                            showingGalleryPicker = true
                        } label: {
                            Image(systemName: "photo.stack")
                                .font(.title2)
                                .foregroundColor(.white)
                                .padding(12)
                                .background(.ultraThinMaterial)
                                .clipShape(Circle())
                        }
                        .padding(.trailing, 16)
                        .padding(.bottom, 160)
                    }
                }
#endif
            }
            .ignoresSafeArea(.container, edges: [.top])
            // LandmarkDetail Navigation
            .navigationDestination(isPresented: Binding(
                get: { navigateToLandmark != nil },
                set: { if !$0 { navigateToLandmark = nil } }
            )) {
                if let landmark = navigateToLandmark {
                    LandmarkDetailView(landmark: landmark)
                }
            }
            // Debug gallery
            .sheet(isPresented: $showingGalleryPicker) {
                NavigationView {
                    ScrollView {
                        LazyVGrid(columns: [
                            GridItem(.flexible()),
                            GridItem(.flexible()),
                            GridItem(.flexible())
                        ], spacing: 8) {
                            ForEach(viewModel.debugImages, id: \.self) { name in
                                Image(name)
                                    .resizable()
                                    .aspectRatio(contentMode: .fill)
                                    .frame(height: 120)
                                    .clipShape(RoundedRectangle(cornerRadius: 8))
                                    .onTapGesture {
                                        if let uiImage = UIImage(named: name) {
                                            Task {
                                                await viewModel.detectLandmark(image: uiImage, using: detectionService)
                                                if let landmark = viewModel.detectedLandmark {
                                                    await animateLandmarkDetectionFlow(landmark: landmark)
                                                }
                                            }
                                        }
                                        showingGalleryPicker = false
                                    }
                            }
                        }
                        .padding()
                    }
                    .navigationTitle("Debug Gallery")
                    .toolbar {
                        ToolbarItem(placement: .navigationBarTrailing) {
                            Button("Done") {
                                showingGalleryPicker = false
                            }
                        }
                    }
                }
            }
        }
    }

    /// Runs the fancy scanning animations, then transitions to feed or a detail view as needed.
    private func animateLandmarkDetectionFlow(landmark: LandmarkInfo) async {
        // 1) Flash
        withAnimation(.easeIn(duration: 0.1)) {
            shouldFlash = true
        }
        // 2) Wait a moment
        try? await Task.sleep(nanoseconds: 150_000_000)

        // 3) Scanning transition
        withAnimation(.easeInOut(duration: 1.0)) {
            showTransition = true
        }
        try? await Task.sleep(nanoseconds: 1_000_000_000)

        // 4) Fade to black
        withAnimation(.easeIn(duration: 0.5)) {
            fadeToBlack = true
        }
        try? await Task.sleep(nanoseconds: 500_000_000)

        // 5) Move to feed if desired
        // If your logic is to show a detail instead, we can do that below
        // e.g. appState.shouldSwitchToFeed = true

        // For demonstration, let's navigate to LandmarkDetailView in SwiftUI
        navigateToLandmark = landmark

        // Turn off camera mode
        isCameraMode = false

        // Reset animations
        showTransition = false
        fadeToBlack = false
        shouldFlash = false
    }
}

/// ViewModel for controlling Landmark Detection
@MainActor
final class LandmarkDetectionViewModel: ObservableObject {
    @Published var detectedLandmark: LandmarkInfo? = nil
    @Published var errorMessage: String = ""
    @Published var debugImages: [String] = ["utcapitol1", "utcapitol2", "ladybirdlake1"]

    /// Calls the detection service & sets state accordingly.
    func detectLandmark(image: UIImage, using service: LandmarkDetectionService) async {
        self.errorMessage = ""
        self.detectedLandmark = nil

        do {
            if let landmarkData = try await service.detectLandmark(in: image) {
                // Extract the top-level landmark name
                let name = (landmarkData["name"] as? String) ?? "Unknown"
                let locations = (landmarkData["locations"] as? [[String: Any]]) ?? []
                var lat: Double? = nil
                var lon: Double? = nil
                if let firstLocation = locations.first,
                   let latLng = firstLocation["latLng"] as? [String: Any] {
                    lat = latLng["latitude"] as? Double
                    lon = latLng["longitude"] as? Double
                }

                // Possibly there's a neighborhood dictionary
                let nbData = landmarkData["neighborhood"] as? [String: Any]
                let neighborhood = buildNeighborhood(from: nbData)

                let landmarkInfo = LandmarkInfo(
                    name: name,
                    latitude: lat,
                    longitude: lon,
                    neighborhood: neighborhood
                )
                self.detectedLandmark = landmarkInfo
            } else {
                self.errorMessage = "No landmarks detected."
            }
        } catch {
            self.errorMessage = "Error detecting landmark: \(error.localizedDescription)"
        }
    }

    /// If the server returned a 'neighborhood' dictionary, build a minimal Neighborhood object.
    private func buildNeighborhood(from data: [String: Any]?) -> Neighborhood? {
        guard let data = data,
              let placeId = data["place_id"] as? String,
              let nbName = data["name"] as? String,
              let geometry = data["bounds"] as? [String: Any],
              let ne = geometry["northeast"] as? [String: Any],
              let sw = geometry["southwest"] as? [String: Any] else {
            return nil
        }
        let bounds = Neighborhood.GeoBounds(
            northeast: Neighborhood.GeoBounds.Point(
                lat: ne["lat"] as? Double ?? 0,
                lng: ne["lng"] as? Double ?? 0
            ),
            southwest: Neighborhood.GeoBounds.Point(
                lat: sw["lat"] as? Double ?? 0,
                lng: sw["lng"] as? Double ?? 0
            )
        )
        // We only have minimal fields. The rest are optional or not provided.
        return Neighborhood(
            id: placeId,
            name: nbName,
            description: nil,
            imageUrl: nil,
            bounds: bounds,
            landmarks: nil
        )
    }
}
===
    </content>
  </change>
</file>
