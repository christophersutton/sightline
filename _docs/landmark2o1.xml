<Plan>
1. Wrap the TabView in a NavigationStack in MainTabView.swift, ensuring .navigationDestination in LandmarkDetectionView is honored.
2. Pass the same ContentFeedViewModel as an EnvironmentObject to LandmarkDetectionView, so we can refresh unlocked neighborhoods immediately after detection.
3. In LandmarkDetectionView, once a new landmark is detected, force a reload of unlocked neighborhoods & content so the feed is updated without app relaunch.
4. Then we transition to LandmarkDetailView (or tab feed) as desired.
</Plan>

<file path="sightline/sightline/Views/MainTabView.swift" action="rewrite">
  <change>
    <description>Wrap the TabView in a NavigationStack and provide feedViewModel to LandmarkDetectionView</description>
    <content>
===
import SwiftUI
import FirebaseAuth

struct MainTabView: View {
    @StateObject private var appState = AppState()
    @State private var selectedTab = 0
    @StateObject private var feedViewModel = ContentFeedViewModel()
    private let services = ServiceContainer.shared
    
    var body: some View {
        NavigationStack {
            TabView(selection: $selectedTab) {
                // Landmark Detection Tab
                LandmarkDetectionView()
                    .environmentObject(appState)
                    .environmentObject(feedViewModel)  // <-- Provide feedViewModel
                    .tabItem {
                        Label("Discover", systemImage: "camera.viewfinder")
                    }
                    .tag(0)
                
                // Content Feed Tab
                ContentFeedView()
                    .environmentObject(appState)
                    .environmentObject(feedViewModel)
                    .tabItem {
                        Label("Feed", systemImage: "play.square.stack")
                    }
                    .tag(1)
                
                // Profile Tab
                ProfileView()
                    .environmentObject(appState)
                    .tabItem {
                        Label("Profile", systemImage: "person.circle")
                    }
                    .tag(2)
            }
            .tint(.white)
            .onAppear {
                // Customize Tab Bar appearance
                let appearance = UITabBarAppearance()
                appearance.configureWithOpaqueBackground()
                appearance.backgroundColor = UIColor.black
                
                appearance.stackedLayoutAppearance.normal.iconColor = .gray
                appearance.stackedLayoutAppearance.normal.titleTextAttributes = [.foregroundColor: UIColor.gray]
                
                appearance.stackedLayoutAppearance.selected.iconColor = .white
                appearance.stackedLayoutAppearance.selected.titleTextAttributes = [.foregroundColor: UIColor.white]
                
                UITabBar.appearance().standardAppearance = appearance
                if #available(iOS 15.0, *) {
                    UITabBar.appearance().scrollEdgeAppearance = appearance
                }
            }
            .task {
                do {
                    try await services.auth.signInAnonymously()
                } catch {
                    print("Failed to sign in: \\(error)")
                }
            }
            // Switch to Feed when requested
            .onChange(of: appState.shouldSwitchToFeed) { oldValue, newValue in
                if newValue {
                    withAnimation {
                        selectedTab = 1
                    }
                    appState.shouldSwitchToFeed = false
                }
            }
            // Pause video if leaving feed
            .onChange(of: selectedTab) { oldValue, newValue in
                if oldValue == 1 && newValue != 1 {
                    feedViewModel.videoManager.currentPlayer?.pause()
                }
            }
            // Switch to Profile when requested
            .onChange(of: appState.shouldSwitchToProfile) { oldValue, newValue in
                if newValue {
                    withAnimation {
                        selectedTab = 2
                    }
                    appState.shouldSwitchToProfile = false
                }
            }
        }
    }
}
===
    </content>
  </change>
</file>

<file path="sightline/sightline/Views/LandmarkDetection.swift" action="rewrite">
  <change>
    <description>Inject feedViewModel and force refresh unlocked neighborhoods after detection, then navigate to detail view</description>
    <content>
===
import SwiftUI
import UIKit
import FirebaseAuth
import FirebaseFirestore

/// Main Landmark Detection View + ViewModel,
/// referencing the new LandmarkDetectionService and LandmarkInfo model.
struct LandmarkDetectionView: View {
    @EnvironmentObject var appState: AppState
    @EnvironmentObject var feedViewModel: ContentFeedViewModel  // <-- Add feedViewModel

    private let detectionService = LandmarkDetectionService()

    @StateObject private var viewModel: LandmarkDetectionViewModel = LandmarkDetectionViewModel()
    @State private var isCameraMode = false
    @State private var navigateToLandmark: LandmarkInfo? = nil

    // Scanning UI
    @State private var showTransition: Bool = false
    @State private var shouldFlash = false
    @State private var fadeToBlack = false
    @State private var showingGalleryPicker = false

    @Namespace private var scanningNamespace

    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // Background
                Image("discoverbg")
                    .resizable()
                    .aspectRatio(contentMode: .fill)
                    .frame(width: geometry.size.width, height: geometry.size.height + 100)
                    .clipped()

                // If we're in camera mode
                if isCameraMode {
                    CameraView(
                        onFrameCaptured: { image in
                            Task {
                                await viewModel.detectLandmark(image: image, using: detectionService)
                                if let landmark = viewModel.detectedLandmark {
                                    await animateLandmarkDetectionFlow(landmark: landmark)
                                }
                            }
                        },
                        shouldFlash: $shouldFlash
                    )

                    // Close Button
                    VStack {
                        HStack {
                            Button {
                                isCameraMode = false
                            } label: {
                                Image(systemName: "xmark")
                                    .font(.title2)
                                    .foregroundColor(.white)
                                    .padding(12)
                                    .background(.ultraThinMaterial)
                                    .clipShape(Circle())
                            }
                            .padding(.leading)
                            Spacer()
                        }
                        .padding(.top, geometry.safeAreaInsets.top + 40)
                        Spacer()
                    }

                    // Scanning animations
                    if showTransition {
                        ScanningTransitionView(namespace: scanningNamespace)
                            .ignoresSafeArea()
                    } else {
                        ScanningAnimation(namespace: scanningNamespace)
                            .ignoresSafeArea()
                    }

                    // Errors or progress
                    if viewModel.errorMessage.contains("Error") {
                        VStack {
                            Spacer()
                            Text(viewModel.errorMessage)
                                .foregroundColor(.white)
                                .padding()
                                .background(.black.opacity(0.6))
                                .cornerRadius(10)
                                .padding(.bottom, 30)
                        }
                    }

                    // Fade-out overlay
                    Color.black
                        .opacity(fadeToBlack ? 1.0 : 0.0)
                        .ignoresSafeArea()

                } else {
                    // Normal "Discover" screen
                    ScrollView {
                        GeometryReader { scrollGeometry in
                            VStack {
                                Spacer(minLength: 800)

                                VStack(spacing: 16) {
                                    Image(systemName: "camera.viewfinder")
                                        .font(.system(size: 64))
                                        .foregroundColor(Color(.systemYellow))

                                    Text("Discover Your City")
                                        .font(.custom("Baskerville-Bold", size: 32))
                                        .multilineTextAlignment(.center)
                                        .frame(maxWidth: .infinity)
                                        .padding(.horizontal, 24)

                                    Text("Capture landmarks to unlock neighborhood content and explore local stories")
                                        .font(.custom("Baskerville", size: 20))
                                        .foregroundColor(.white)
                                        .multilineTextAlignment(.center)
                                        .frame(maxWidth: .infinity)
                                        .padding(.horizontal, 24)

                                    Button {
                                        isCameraMode = true
                                    } label: {
                                        HStack(spacing: 12) {
                                            Image(systemName: "camera.fill")
                                                .font(.title3)
                                            Text("Open Camera")
                                                .font(.title3)
                                        }
                                        .foregroundColor(.black)
                                        .frame(maxWidth: .infinity)
                                        .padding(.vertical, 16)
                                        .background(Color(.systemYellow))
                                        .cornerRadius(12)
                                    }
                                    .padding(.top, 12)
                                }
                                .padding(24)
                                .background(.ultraThinMaterial)
                                .cornerRadius(16)
                                .shadow(radius: 8)
                                .padding()

                                Spacer(minLength: 0)
                            }
                            .frame(
                                minWidth: scrollGeometry.size.width,
                                minHeight: scrollGeometry.size.height
                            )
                        }
                    }
                }

                #if DEBUG
                // Debug Gallery button
                VStack {
                    Spacer()
                    HStack {
                        Spacer()
                        Button {
                            showingGalleryPicker = true
                        } label: {
                            Image(systemName: "photo.stack")
                                .font(.title2)
                                .foregroundColor(.white)
                                .padding(12)
                                .background(.ultraThinMaterial)
                                .clipShape(Circle())
                        }
                        .padding(.trailing, 16)
                        .padding(.bottom, 160)
                    }
                }
                #endif
            }
            .ignoresSafeArea(.container, edges: [.top])
            // LandmarkDetail Navigation
            .navigationDestination(isPresented: Binding(
                get: { navigateToLandmark != nil },
                set: { if !$0 { navigateToLandmark = nil } }
            )) {
                if let landmark = navigateToLandmark {
                    LandmarkDetailView(landmark: landmark)
                }
            }
            // Debug gallery
            .sheet(isPresented: $showingGalleryPicker) {
                NavigationView {
                    ScrollView {
                        LazyVGrid(columns: [
                            GridItem(.flexible()),
                            GridItem(.flexible()),
                            GridItem(.flexible())
                        ], spacing: 8) {
                            ForEach(viewModel.debugImages, id: \.self) { name in
                                Image(name)
                                    .resizable()
                                    .aspectRatio(contentMode: .fill)
                                    .frame(height: 120)
                                    .clipShape(RoundedRectangle(cornerRadius: 8))
                                    .onTapGesture {
                                        if let uiImage = UIImage(named: name) {
                                            Task {
                                                await viewModel.detectLandmark(image: uiImage, using: detectionService)
                                                if let landmark = viewModel.detectedLandmark {
                                                    await animateLandmarkDetectionFlow(landmark: landmark)
                                                }
                                            }
                                        }
                                        showingGalleryPicker = false
                                    }
                            }
                        }
                        .padding()
                    }
                    .navigationTitle("Debug Gallery")
                    .toolbar {
                        ToolbarItem(placement: .navigationBarTrailing) {
                            Button("Done") {
                                showingGalleryPicker = false
                            }
                        }
                    }
                }
            }
        }
    }

    /// Runs the fancy scanning animations, then transitions to feed or detail, updating unlocked neighborhoods
    private func animateLandmarkDetectionFlow(landmark: LandmarkInfo) async {
        // 1) Flash
        withAnimation(.easeIn(duration: 0.1)) {
            shouldFlash = true
        }
        // 2) Wait a moment
        try? await Task.sleep(nanoseconds: 150_000_000)

        // 3) Scanning transition
        withAnimation(.easeInOut(duration: 1.0)) {
            showTransition = true
        }
        try? await Task.sleep(nanoseconds: 1_000_000_000)

        // 4) Fade to black
        withAnimation(.easeIn(duration: 0.5)) {
            fadeToBlack = true
        }
        try? await Task.sleep(nanoseconds: 500_000_000)

        // Reload neighborhoods so UI updates immediately
        feedViewModel.hasLoadedNeighborhoods = false
        await feedViewModel.loadUnlockedNeighborhoods()
        await feedViewModel.loadContent()

        // 5) Show Landmark Detail
        navigateToLandmark = landmark

        // Turn off camera mode
        isCameraMode = false

        // Reset animations
        showTransition = false
        fadeToBlack = false
        shouldFlash = false
    }
}

/// ViewModel for controlling Landmark Detection
@MainActor
final class LandmarkDetectionViewModel: ObservableObject {
    @Published var detectedLandmark: LandmarkInfo? = nil
    @Published var errorMessage: String = ""
    @Published var debugImages: [String] = ["utcapitol1", "utcapitol2", "ladybirdlake1"]

    func detectLandmark(image: UIImage, using service: LandmarkDetectionService) async {
        self.errorMessage = ""
        self.detectedLandmark = nil

        do {
            if let landmarkData = try await service.detectLandmark(in: image) {
                // Extract the top-level landmark name
                let name = (landmarkData["name"] as? String) ?? "Unknown"
                let locations = (landmarkData["locations"] as? [[String: Any]]) ?? []
                var lat: Double? = nil
                var lon: Double? = nil
                if let firstLocation = locations.first,
                   let latLng = firstLocation["latLng"] as? [String: Any] {
                    lat = latLng["latitude"] as? Double
                    lon = latLng["longitude"] as? Double
                }

                // Possibly there's a neighborhood dictionary
                let nbData = landmarkData["neighborhood"] as? [String: Any]
                let neighborhood = buildNeighborhood(from: nbData)

                let landmarkInfo = LandmarkInfo(
                    name: name,
                    latitude: lat,
                    longitude: lon,
                    neighborhood: neighborhood
                )
                self.detectedLandmark = landmarkInfo
            } else {
                self.errorMessage = "No landmarks detected."
            }
        } catch {
            self.errorMessage = "Error detecting landmark: \\(error.localizedDescription)"
        }
    }

    private func buildNeighborhood(from data: [String: Any]?) -> Neighborhood? {
        guard let data = data,
              let placeId = data["place_id"] as? String,
              let nbName = data["name"] as? String,
              let geometry = data["bounds"] as? [String: Any],
              let ne = geometry["northeast"] as? [String: Any],
              let sw = geometry["southwest"] as? [String: Any] else {
            return nil
        }
        let bounds = Neighborhood.GeoBounds(
            northeast: Neighborhood.GeoBounds.Point(
                lat: ne["lat"] as? Double ?? 0,
                lng: ne["lng"] as? Double ?? 0
            ),
            southwest: Neighborhood.GeoBounds.Point(
                lat: sw["lat"] as? Double ?? 0,
                lng: sw["lng"] as? Double ?? 0
            )
        )
        return Neighborhood(
            id: placeId,
            name: nbName,
            description: nil,
            imageUrl: nil,
            bounds: bounds,
            landmarks: nil
        )
    }
}
===
    </content>
  </change>
</file>
